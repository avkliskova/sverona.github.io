<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on S. Verona Malone</title><link>https://sverona.github.io/tags/code/</link><description>Recent content in code on S. Verona Malone</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://sverona.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Mimicking LaTeX theorem environments with CSS</title><link>https://sverona.github.io/blog/mimicking-latex-theorem-environments-with-css/</link><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid>https://sverona.github.io/blog/mimicking-latex-theorem-environments-with-css/</guid><description>LaTeX supports &amp;ldquo;theorem environments,&amp;rdquo; like this:
(Image)
These aren&amp;rsquo;t hard to mimic with :before and :after:
article { counter-reset: definition theorem lemma example proposition corollary; } .definition:before { counter-increment: definition; content: &amp;#34;Definition &amp;#34; counter(definition) &amp;#34;.&amp;#34;; font-weight: bold; } .theorem:before { counter-increment: theorem; content: &amp;#34;Theorem &amp;#34; counter(theorem) &amp;#34;.&amp;#34;; font-weight: bold; } .lemma:before { counter-increment: lemma; content: &amp;#34;Lemma &amp;#34; counter(lemma) &amp;#34;.&amp;#34;; font-weight: bold; } .example:before { counter-increment: example; content: &amp;#34;Example &amp;#34; counter(example) &amp;#34;.</description></item><item><title>Project Euler 1-100 in 49 hours</title><link>https://sverona.github.io/blog/project-euler/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://sverona.github.io/blog/project-euler/</guid><description>Project Euler is how I taught myself Python in high school, and so I find it incredibly nostalgic. It took 13-year-old me a lot of Googling and a few months to get through the first 100 problems.
10-odd years and a graduate degree later, I decided to come back and solve them as fast as I could. I&amp;rsquo;m no competitive programmer, but 24 hours seemed reasonable. Fortunately, I lack the stamina to code for that long, so I did it over a few days instead.</description></item></channel></rss>